#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include "macros.dtsi"

// / {
//     chosen { zmk,matrix_transform = &default_transform; };
// };

/ {
    /* input config for mouse move mode */

    trackball_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <0 2 7>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <2>;

        // bindings = <&ib_toggle_layer 7>;
    };

    /* input config for snipe mode */

    trackball_snipe_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <8>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <4>;
    };

    /* input config for mouse scroll mode */

    trackball_scroll_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <9>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_MISC>;
        y-input-code = <INPUT_REL_WHEEL>;
        y-invert;
        bindings = <&ib_wheel_scaler 1 14>;
    };

    /* define a resolution down scaler only for INPUT_REL_WHEEL */

    ib_wheel_scaler: ib_wheel_scaler {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_WHEEL>;
    };

    /* adjust cooldown waiting period for mouse key layer after activated */

    ib_toggle_layer: ib_toggle_layer {
        compatible = "zmk,input-behavior-tog-layer";
        #binding-cells = <1>;
        time-to-live-ms = <750>;
    };

    behaviors {
        hm: homerow_mod {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <175>; // triggers the hold behavior when the tapping-term-ms has expired
            quick-tap-ms = <160>; // If you press a tapped hold-tap again within quick-tap-ms milliseconds of the first press, it will always trigger the tap behavior.
            require-prior-idle-ms = <185>; // like quick-tap-ms however it will apply for any non-modifier key pressed before it
            bindings = <&kp>, <&kp>;
  // hold, tap
        };

        hmsh: homerow_mod_short {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <135>; // triggers the hold behavior when the tapping-term-ms has expired
            quick-tap-ms = <120>; // If you press a tapped hold-tap again within quick-tap-ms milliseconds of the first press, it will always trigger the tap behavior.
            require-prior-idle-ms = <145>; // like quick-tap-ms however it will apply for any non-modifier key pressed before it
            bindings = <&kp>, <&kp>;
  // hold, tap
        };

        td_cursor: td_scroll_or_cursor {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&lt 9 ESC>, <&mkp RCLK>;
 // hold, tap, double_tap
        };

        hm_s: homerow_mod_special {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <210>; // triggers the hold behavior when the tapping-term-ms has expired
            quick-tap-ms = <180>; // If you press a tapped hold-tap again within quick-tap-ms milliseconds of the first press, it will always trigger the tap behavior.
            require-prior-idle-ms = <220>; // like quick-tap-ms however it will apply for any non-modifier key pressed before it
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34>;
        };

        hm_right: homerow_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <195>; // triggers the hold behavior when the tapping-term-ms has expired
            quick-tap-ms = <170>; // If you press a tapped hold-tap again within quick-tap-ms milliseconds of the first press, it will always trigger the tap behavior.
            require-prior-idle-ms = <200>; // like quick-tap-ms however it will apply for any non-modifier key pressed before it
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
        };

        td_layers: td_layer_swap {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&to 0>, <&to 5>, <&to 4>;
 // tap, double_tap, tripple_tap
        };

        td_clk_scrl: td_click_or_scroll {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <195>;
            bindings = <&mkp RCLK>, <&mo 9>;
  // tap/hold, double_tap
        };

        td_rbck: td_right_bracket {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <195>;
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;
        };

        td_rp: td_right_paren {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <195>;
            bindings = <&kp D>, <&kp RIGHT_PARENTHESIS>;
        };

        td_rbc: td_right_brace {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <195>;
            bindings = <&kp B>, <&kp RIGHT_BRACE>;
        };

        td_rgt: td_right_greater_than {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <195>;
            bindings = <&kp K>, <&kp GREATER_THAN>;
        };

        td_vt: td_v_tab {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <195>;
            bindings = <&kp V>, <&kp TAB>;
        };

        td_2c: td_2_coma {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <195>;
            bindings = <&hm F2 N2>, <&kp COMMA>;
        };

        td_3d: td_3_dot {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <195>;
            bindings = <&hm F3 N3>, <&kp DOT>;
        };

        td_bore: BASE_or_EXTRA {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&mo 6>, <&to 0>;
        };
    };

    combos {
        compatible = "zmk,combos";

        BASE_or_EXTRAS {
            bindings = <&td_bore>;
            key-positions = <4 5>;
        };
    };

    // ╭──────┬──────┬──────┬──────┬──────┬──────╮  ╭──────┬──────┬──────┬──────┬──────┬──────╮
    //    00     01     02     03    04      05        06     07     08     09     10     11
    // ├──────┼──────┼──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┼──────┼──────┼──────┤
    //    12     13     14     15    16      17        18     19     20     21     22     23
    // ├──────┼──────┼──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┼──────┼──────┼──────┤
    //    24     25     26     27    28      29        30     31     32     33     34     35
    // ╰──────┴──────┴──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┴──────┴──────┴──────╯
    //                         36     37     38        39     40
    //                      ╰──────┴──────┴──────╯  ╰──────┴──────╯
    // ╭──────┬──────┬──────┬──────┬──────╮  ╭──────┬──────┬──────┬──────┬──────╮
    //    00     01     02     03     04        05     06     07     08     09   
    // ├──────┼──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┼──────┼──────┤
    //    10     11     12     13     14        15     16     17     18     19   
    // ├──────┼──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┼──────┼──────┤
    //    20     21     22     23     24        25     26     27     28     29    
    // ╰──────┴──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┴──────┴──────╯
    //                  30     31     32        33     34
    //               ╰──────┴──────┴──────╯  ╰──────┴──────╯
    // #define BASE    0
    // #define NUM     1
    // #define NAV     2
    // #define SYM     3
    // #define GAME    4
    // #define PHOTOS  5
    // #define EXTRAS  6
    // #define MOUSE   7
    // #define SLOW    8
    // #define SCROLL  9

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&to 0            &kp Q          &kp W       &mt LC(LS(LALT)) F  &hm ESC P     &kp G          &kp J         &kp L             &hm LG(F) U        &hm LG(R) Y       &hm LG(S) SEMI    &td_layers
&hm LCMD TAB     &kp A          &hm LALT S  &hm LCTRL R         &hm_s LGUI T  &hm LPAR D     &hm LBKT M    &hm_right LGUI N  &hm_right LCTRL E  &hm_right LALT I  &kp O             &mt DEL DEL
&kp C_AC_SEARCH  &hmsh LSHFT Z  &kp X       &kp C               &td_vt        &hm LBRC B     &hm LT K      &kp H             &kp COMMA          &kp DOT           &hmsh RSHFT FSLH  &kp F12
                                            &td_cursor          &mkp LCLK     &lt 1 SPACE    &lt 2 RETURN  &lt 3 BACKSPACE
            >;
        };

        NUM {
            bindings = <
&none  &kp CAPS   &kp LC(LS(N0))  &kp LC(LS(N1))  &kp LC(LS(N2))  &none          &kp SLASH  &hm F7 N7  &hm F8 N8     &hm F9 N9   &hm F10 MINUS  &none
&none  &kp LG(Z)  &glog           &ghard          &kp BACKSPACE   &gcheckout     &kp ASTRK  &hm F4 N4  &hm F5 N5     &hm F6 N6   &hm F11 PLUS   &none
&none  &kp LG(A)  &kp LG(X)       &kp LG(C)       &kp LG(V)       &kp LG(TAB)    &kp N0     &hm F1 N1  &hm COMMA N2  &hm DOT N3  &hm F12 EQUAL  &none
                                  &kp RETURN      &none           &none          &trans     &trans
            >;
        };

        NAV {
            bindings = <
&none  &trans  &kp C_VOL_UP  &trans   &trans   &kp C_BRI_UP    &trans    &trans    &hm LG(LS(F)) LG(F)  &kp LC(LS(N0))  &trans     &none
&none  &trans  &kp C_VOL_DN  &HSplit  &VSplit  &kp C_BRI_DN    &kp DARW  &kp RARW  &kp LG(A)            &kp LG(Z)       &trans     &none
&none  &trans  &kp C_MUTE    &trans   &trans   &trans          &kp UARW  &kp LARW  &kp LG(V)            &kp LG(C)       &kp LG(X)  &none
                             &none    &trans   &trans          &trans    &trans
            >;
        };

        SYM {
            bindings = <
&none  &kp GRAVE  &kp APOS  &kp DQT  &kp DLLR  &trans      &trans    &kp PRCNT  &kp CARET  &kp AMPS   &kp ASTRK  &none
&none  &kp TILDE  &kp EXCL  &kp AT   &kp HASH  &kp RPAR    &kp RBKT  &kp PIPE   &kp MINUS  &kp EQUAL  &kp QMARK  &none
&none  &trans     &trans    &trans   &trans    &kp RBRC    &kp GT    &trans     &kp UNDER  &kp PLUS   &kp BSLH   &none
                            &none    &trans    &trans      &trans    &trans
            >;
        };

        GAME {
            bindings = <
&kp N1  &kp TAB    &kp Q  &kp W  &kp E      &kp R           &none  &none  &none  &none  &none  &none
&kp N2  &kp LCTRL  &kp A  &kp S  &kp D      &kp F           &none  &none  &none  &none  &none  &none
&kp N3  &kp LSHFT  &kp Z  &kp X  &kp C      &kp V           &none  &none  &none  &none  &none  &none
                          &none  &kp SPACE  &kp LEFT_ALT    &none  &none
            >;
        };

        PHOTOS {
            bindings = <
&trans          &kp LA(LC(LS(Z)))  &kp LA(LC(LS(E)))  &kp LA(LC(LS(A)))  &kp LA(LC(LS(S)))  &kp LA(LC(LS(B)))    &none   &none   &none  &none  &none  &none
&kp LC(LA(E))   &kp LEFT           &kp DOWN           &kp UP             &kp RIGHT          &kp LCTRL            &none   &none   &none  &none  &none  &trans
&kp LS(DELETE)  &kp LA(LS(A))      &kp LA(KP_N1)      &kp LA(KP_N2)      &kp LA(KP_N3)      &none                &none   &none   &none  &none  &none  &none
                                                      &trans             &trans             &trans               &trans  &trans
            >;
        };

        EXTRAS {
            bindings = <
&kp C_POWER      &shrug  &lgtm     &gcm      &none  &kp C_BRIGHTNESS_INC    &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2       &bt BT_SEL 3     &out OUT_TOG     &bt BT_CLR
&kp C_SLEEP      &shit   &py_iter  &js_iter  &none  &kp C_BRIGHTNESS_DEC    &none         &kp C_PREVIOUS  &kp C_PLAY_PAUSE   &kp C_STOP       &kp C_NEXT       &none
&kp C_AL_COFFEE  &none   &none     &none     &none  &clip_hist              &new_dir      &kp K_MUTE      &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp PRINTSCREEN  &studio_unlock
                                   &none     &none  &none                   &none         &none
            >;
        };

        MOUSE {
            bindings = <
&none    &msc MOVE_LEFT  &msc MOVE_UP    &mmv MOVE_UP    &msc MOVE_DOWN   &msc MOVE_RIGHT    &none       &none            &none      &none         &none     &none
&kp TAB  &mkp MB4        &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &mkp MB5           &none       &kp RIGHT_SHIFT  &kp RCTRL  &kp LEFT_ALT  &kp LCMD  &none
&none    &kp C_AC_UNDO   &kp C_AC_CUT    &kp C_AC_COPY   &kp C_AC_PASTE   &mkp MCLK          &none       &none            &none      &none         &none     &none
                                         &trans          &trans           &trans             &kp RETURN  &trans
            >;
        };

        SLOW {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };
    };
};
